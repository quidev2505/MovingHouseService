{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../src/parse.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import parseHtml, {\n  convertElementStyle,\n  convertStylesheet,\n  HtmlElement,\n} from './parse';\n\ndescribe('parse', () => {\n  describe('convertStylesheet', () => {\n    it('Should convert CSS into HtmlStyles', () => {\n      const content = `.my-heading4, #foobar, div > li {\n        background: darkgreen;\n        color: white;\n      }\n      div {\n        span {\n          fontWeight: bold;\n        }\n      }\n      pre {\n        background-color: #eee;\n        padding: 10px;\n      }`;\n\n      const result = convertStylesheet(content);\n      const expected = {\n        '.my-heading4': {\n          backgroundColor: 'darkgreen',\n          color: 'white',\n        },\n        '#foobar': {\n          backgroundColor: 'darkgreen',\n          color: 'white',\n        },\n        div: {\n          // TODO: support nested styles\n        },\n        'div>li': {\n          backgroundColor: 'darkgreen',\n          color: 'white',\n        },\n        pre: {\n          backgroundColor: '#eee',\n          padding: '10px',\n        },\n      };\n\n      expect(result).toEqual(expected);\n    });\n\n    it('Should handle empty', () => {\n      const content = ``;\n\n      const result = convertStylesheet(content);\n      const expected = {};\n\n      expect(result).toEqual(expected);\n    });\n  });\n\n  describe('convertElementStyle', () => {\n    it('Should convert element CSS into HtmlStyle', () => {\n      const content = `background: darkgreen;color: white;bogus: nope`;\n\n      const result = convertElementStyle(content, 'div');\n      const expected = {\n        backgroundColor: 'darkgreen',\n        bogus: 'nope',\n        color: 'white',\n      };\n\n      expect(result).toEqual(expected);\n    });\n\n    it('Should handle empty', () => {\n      const content = ``;\n\n      const result = convertElementStyle(content, 'div');\n      const expected = {};\n\n      expect(result).toEqual(expected);\n    });\n  });\n\n  describe('parseHtml', () => {\n    it('Should convert HTML into a JSON tree', () => {\n      const content = `\nWelcome to your <b>doom!</b>:\n<p>\n    <ul>\n        <li>First item</li>\n        <li>Second item: <a href=\"http://google.com\">google.com</a></li>\n    </ul>\n</p>\n      `;\n\n      const result = parseHtml(content);\n      const root = result.rootElement;\n      expect(root.content[0]).toEqual('\\nWelcome to your ');\n      expect((root.content[1] as HtmlElement).tag).toEqual('b');\n      expect((root.content[1] as HtmlElement).content).toEqual(['doom!']);\n      expect(root.content[2]).toEqual(':\\n');\n\n      const paragraph = root.content[3] as HtmlElement;\n      expect(paragraph.tag).toEqual('p');\n      expect(paragraph.content[0]).toEqual('\\n    ');\n\n      const list = paragraph.content[1] as HtmlElement;\n      expect(list.tag).toEqual('ul');\n\n      const listItem1 = list.content[1] as HtmlElement;\n      expect(listItem1.tag).toBe('li');\n      expect(listItem1.content).toEqual(['First item']);\n      expect(listItem1.indexOfType).toEqual(0);\n\n      const listItem2 = list.content[3] as HtmlElement;\n      expect(listItem2.tag).toBe('li');\n      expect(listItem2.content[0]).toEqual('Second item: ');\n      expect(listItem2.indexOfType).toEqual(1);\n\n      const link = listItem2.content[1] as HtmlElement;\n      expect(link.tag).toBe('a');\n      expect(link.attributes.href).toBe('http://google.com');\n      expect(link.content).toEqual(['google.com']);\n    });\n  });\n});\n"]}